//迷宫算法

求迷宫中一条从入口到出口的路径的算法可以描述为：
设定当前位置为入口位置;
do {
    若当前位置可通,
    则{
        当前位置插入栈顶;//纳入路径中
        若该位置为出口位置，则结束。//所求路径在栈中。
        否则切换当前位置的东临方块为新的当前位置;
    }
    否则，
        若栈不空切栈顶位置上有其他方向未经探索,
            则设定新的当前位置为沿着顺时针方向旋转找到的栈顶位置的下一相邻块;
        若栈不空但栈顶位置的四周均不可通，
            则 {
                删去栈顶位置    //从路径中去掉该通道块
                若栈不空，则重新测试新的栈顶位置，直至找到一个可通的相邻快或出栈至栈空；
            }
    }while(栈不空);
当前位置可通指的是未曾走到过的通道块，即要求该方快位置不仅是通道块，而且既不在当前路径上（否则所求路径就不是简单路径）也不是曾经纳入过路径的通道块（否则只能在死胡同内打转）。

typedef struct {
    int ord;    //通道块在路径上的“序号”
    PosType seat;//通道块在迷宫中的”坐标位置“
    int di;     //从此通道块走向下一个通道块的方向
}SElemType;     //栈的元素类型

Status MazePath (
